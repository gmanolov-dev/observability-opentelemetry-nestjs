{"version":3,"file":"OTLPLogExporter.js","sourceRoot":"","sources":["../../src/OTLPLogExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,8CAA2D;AAC3D,2CAAyC;AACzC,oFAMgD;AAChD,sEAGyC;AAEzC;;GAEG;AACH,MAAa,eACX,SAAQ,kDAAsE;IAG9E,YAAY,SAAqC,EAAE;QACjD,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,MAAM,OAAO,GAAG,mBAAY,CAAC,uBAAuB,CAClD,IAAA,aAAM,GAAE,CAAC,+BAA+B,CACzC,CAAC;QACF,IAAI,CAAC,QAAQ,KAAb,IAAI,CAAC,QAAQ,GAAK,IAAI,kBAAQ,EAAE,EAAC;QACjC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACzB;IACH,CAAC;IAED,OAAO,CAAC,UAA+B;QACrC,OAAO,IAAA,iDAA8B,EAAC,UAAU,CAAC,CAAC;IACpD,CAAC;IAED,aAAa,CAAC,MAAkC;QAC9C,OAAO,IAAA,iDAAuB,EAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,oBAAoB;QAClB,OAAO,2CAAiB,CAAC,IAAI,CAAC;IAChC,CAAC;IAED,mBAAmB;QACjB,OAAO,0DAA0D,CAAC;IACpE,CAAC;IAED,gBAAgB,CAAC,MAAkC;QACjD,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,EAAE;YAClC,OAAO,MAAM,CAAC,GAAG,CAAC;SACnB;QAED,OAAO,CACL,IAAA,aAAM,GAAE,CAAC,gCAAgC;YACzC,IAAA,aAAM,GAAE,CAAC,2BAA2B;YACpC,+CAAqB,CACtB,CAAC;IACJ,CAAC;CACF;AA1CD,0CA0CC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogRecordExporter, ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport { Metadata } from '@grpc/grpc-js';\nimport {\n  OTLPGRPCExporterConfigNode,\n  OTLPGRPCExporterNodeBase,\n  ServiceClientType,\n  validateAndNormalizeUrl,\n  DEFAULT_COLLECTOR_URL,\n} from '@opentelemetry/otlp-grpc-exporter-base';\nimport {\n  createExportLogsServiceRequest,\n  IExportLogsServiceRequest,\n} from '@opentelemetry/otlp-transformer';\n\n/**\n * OTLP Logs Exporter for Node\n */\nexport class OTLPLogExporter\n  extends OTLPGRPCExporterNodeBase<ReadableLogRecord, IExportLogsServiceRequest>\n  implements LogRecordExporter\n{\n  constructor(config: OTLPGRPCExporterConfigNode = {}) {\n    super(config);\n    const headers = baggageUtils.parseKeyPairsIntoRecord(\n      getEnv().OTEL_EXPORTER_OTLP_LOGS_HEADERS\n    );\n    this.metadata ||= new Metadata();\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n  }\n\n  convert(logRecords: ReadableLogRecord[]): IExportLogsServiceRequest {\n    return createExportLogsServiceRequest(logRecords);\n  }\n\n  getDefaultUrl(config: OTLPGRPCExporterConfigNode) {\n    return validateAndNormalizeUrl(this.getUrlFromConfig(config));\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.LOGS;\n  }\n\n  getServiceProtoPath(): string {\n    return 'opentelemetry/proto/collector/logs/v1/logs_service.proto';\n  }\n\n  getUrlFromConfig(config: OTLPGRPCExporterConfigNode): string {\n    if (typeof config.url === 'string') {\n      return config.url;\n    }\n\n    return (\n      getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT ||\n      getEnv().OTEL_EXPORTER_OTLP_ENDPOINT ||\n      DEFAULT_COLLECTOR_URL\n    );\n  }\n}\n"]}